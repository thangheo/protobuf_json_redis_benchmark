// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataStorage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataStorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataStorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataStorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataStorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataStorage_2eproto;
class DataStorage_t;
class DataStorage_tDefaultTypeInternal;
extern DataStorage_tDefaultTypeInternal _DataStorage_t_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataStorage_t* Arena::CreateMaybeMessage<::DataStorage_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DataStorage_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataStorage_t) */ {
 public:
  inline DataStorage_t() : DataStorage_t(nullptr) {};
  virtual ~DataStorage_t();

  DataStorage_t(const DataStorage_t& from);
  DataStorage_t(DataStorage_t&& from) noexcept
    : DataStorage_t() {
    *this = ::std::move(from);
  }

  inline DataStorage_t& operator=(const DataStorage_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStorage_t& operator=(DataStorage_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataStorage_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataStorage_t* internal_default_instance() {
    return reinterpret_cast<const DataStorage_t*>(
               &_DataStorage_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataStorage_t& a, DataStorage_t& b) {
    a.Swap(&b);
  }
  inline void Swap(DataStorage_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStorage_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataStorage_t* New() const final {
    return CreateMaybeMessage<DataStorage_t>(nullptr);
  }

  DataStorage_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataStorage_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataStorage_t& from);
  void MergeFrom(const DataStorage_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataStorage_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataStorage_t";
  }
  protected:
  explicit DataStorage_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DataStorage_2eproto);
    return ::descriptor_table_DataStorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFruitFieldNumber = 1,
    kWeightFieldNumber = 2,
    kSizeFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string fruit = 1;
  void clear_fruit();
  const std::string& fruit() const;
  void set_fruit(const std::string& value);
  void set_fruit(std::string&& value);
  void set_fruit(const char* value);
  void set_fruit(const char* value, size_t size);
  std::string* mutable_fruit();
  std::string* release_fruit();
  void set_allocated_fruit(std::string* fruit);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fruit();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fruit(
      std::string* fruit);
  private:
  const std::string& _internal_fruit() const;
  void _internal_set_fruit(const std::string& value);
  std::string* _internal_mutable_fruit();
  public:

  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // double size = 3;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // double price = 4;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:DataStorage_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fruit_;
  double weight_;
  double size_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataStorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataStorage_t

// string fruit = 1;
inline void DataStorage_t::clear_fruit() {
  fruit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DataStorage_t::fruit() const {
  // @@protoc_insertion_point(field_get:DataStorage_t.fruit)
  return _internal_fruit();
}
inline void DataStorage_t::set_fruit(const std::string& value) {
  _internal_set_fruit(value);
  // @@protoc_insertion_point(field_set:DataStorage_t.fruit)
}
inline std::string* DataStorage_t::mutable_fruit() {
  // @@protoc_insertion_point(field_mutable:DataStorage_t.fruit)
  return _internal_mutable_fruit();
}
inline const std::string& DataStorage_t::_internal_fruit() const {
  return fruit_.Get();
}
inline void DataStorage_t::_internal_set_fruit(const std::string& value) {
  
  fruit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataStorage_t::set_fruit(std::string&& value) {
  
  fruit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataStorage_t.fruit)
}
inline void DataStorage_t::set_fruit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fruit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DataStorage_t.fruit)
}
inline void DataStorage_t::set_fruit(const char* value,
    size_t size) {
  
  fruit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataStorage_t.fruit)
}
inline std::string* DataStorage_t::_internal_mutable_fruit() {
  
  return fruit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataStorage_t::release_fruit() {
  // @@protoc_insertion_point(field_release:DataStorage_t.fruit)
  return fruit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataStorage_t::set_allocated_fruit(std::string* fruit) {
  if (fruit != nullptr) {
    
  } else {
    
  }
  fruit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fruit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataStorage_t.fruit)
}
inline std::string* DataStorage_t::unsafe_arena_release_fruit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DataStorage_t.fruit)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fruit_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataStorage_t::unsafe_arena_set_allocated_fruit(
    std::string* fruit) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fruit != nullptr) {
    
  } else {
    
  }
  fruit_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fruit, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DataStorage_t.fruit)
}

// double weight = 2;
inline void DataStorage_t::clear_weight() {
  weight_ = 0;
}
inline double DataStorage_t::_internal_weight() const {
  return weight_;
}
inline double DataStorage_t::weight() const {
  // @@protoc_insertion_point(field_get:DataStorage_t.weight)
  return _internal_weight();
}
inline void DataStorage_t::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void DataStorage_t::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:DataStorage_t.weight)
}

// double size = 3;
inline void DataStorage_t::clear_size() {
  size_ = 0;
}
inline double DataStorage_t::_internal_size() const {
  return size_;
}
inline double DataStorage_t::size() const {
  // @@protoc_insertion_point(field_get:DataStorage_t.size)
  return _internal_size();
}
inline void DataStorage_t::_internal_set_size(double value) {
  
  size_ = value;
}
inline void DataStorage_t::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DataStorage_t.size)
}

// double price = 4;
inline void DataStorage_t::clear_price() {
  price_ = 0;
}
inline double DataStorage_t::_internal_price() const {
  return price_;
}
inline double DataStorage_t::price() const {
  // @@protoc_insertion_point(field_get:DataStorage_t.price)
  return _internal_price();
}
inline void DataStorage_t::_internal_set_price(double value) {
  
  price_ = value;
}
inline void DataStorage_t::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:DataStorage_t.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataStorage_2eproto
